[{"apiVersion":"influxdata.com/v2alpha1","kind":"Task","metadata":{"name":"stoic-pascal-118001"},"spec":{"every":"30s","name":"validate_data","query":"latestTokens =\n    from(bucket: \"users_tokens\")\n        |> range(start: 0)\n        |> filter(fn: (r) => r._measurement == \"agent_tokens\")\n        |> pivot(rowKey: [\"_time\"], columnKey: [\"_field\"], valueColumn: \"_value\")\n        |> keep(columns: [\"agent_name\", \"agent_tok\"])\n        |> last(column: \"agent_tok\")\n\n// yield(tables: latestTokens)\nmetricsData =\n    from(bucket: \"telegraf_agent_data\")\n        |> range(start: -task.every)\n        |> filter(fn: (r) => r._measurement == \"site_status\" and exists r.agent_tok)\n        |> keep(\n            columns: [\n                \"_time\",\n                \"_measurement\",\n                \"agent_tok\",\n                \"host\",\n                \"url\",\n                \"_value\",\n                \"user_name\",\n            ],\n        )\n        |> rename(columns: {_value: \"status_code\"})\n\n// yield(tables: metricsData)\nvalidMetrics =\n    join(tables: {latestTokens: latestTokens, metricsData: metricsData}, on: [\"agent_tok\"])\n        |> map(\n            fn: (r) =>\n                ({\n                    _measurement: r._measurement,\n                    agent_name: r.agent_name,\n                    host: r.host,\n                    user_name: r.user_name,\n                    url: r.url,\n                    _field: \"status\",\n                    _value: r.status_code,\n                    _time: r._time,\n                }),\n        )\n        |> to(bucket: \"valid_metrics\")"}}]